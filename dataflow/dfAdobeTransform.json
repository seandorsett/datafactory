{
	"name": "dfAdobeTransform",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "tenantXdmJson",
						"type": "DatasetReference"
					},
					"name": "tenantXdm"
				},
				{
					"dataset": {
						"referenceName": "globalXdmJson",
						"type": "DatasetReference"
					},
					"name": "globalXdm"
				},
				{
					"dataset": {
						"referenceName": "xdmDescriptorJson",
						"type": "DatasetReference"
					},
					"name": "xdmDescriptor"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputJson",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "tenantXdmSplit"
				},
				{
					"name": "metaClassXdmLookup"
				},
				{
					"name": "metaClassXdmSelect"
				},
				{
					"name": "nonFilteredSelect"
				},
				{
					"name": "mergedtenantXdm"
				},
				{
					"name": "behaviorDerivedColumn"
				},
				{
					"name": "schemaSourceLookup"
				},
				{
					"name": "descriptorSelect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {_id} as ({$oid} as string),",
				"          id as string,",
				"          type as string,",
				"          title as string,",
				"          auditable as boolean,",
				"          description as string,",
				"          metaclass as string,",
				"          xdmType as string,",
				"          refs as string[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> tenantXdm",
				"source(output(",
				"          {_id} as ({$oid} as string),",
				"          id as string,",
				"          title as string,",
				"          description as string,",
				"          auditable as boolean,",
				"          refs as string[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> globalXdm",
				"source(output(",
				"          {_id} as ({$oid} as string),",
				"          type as string,",
				"          {xdm:sourceSchema} as string,",
				"          {xdm:sourceProperty} as string,",
				"          {xdm:isPrimary} as boolean,",
				"          descriptorType as string,",
				"          version as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> xdmDescriptor",
				"tenantXdm split(locate('/xdm/',metaclass) > 0,",
				"     disjoint: false) ~> tenantXdmSplit@(metaClassXdm, nonFilteredMetaClassXdm)",
				"tenantXdmSplit@metaClassXdm, globalXdm lookup(metaclass == globalXdm@id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> metaClassXdmLookup",
				"metaClassXdmLookup select(mapColumn(",
				"          id = tenantXdmSplit@metaClassXdm@id,",
				"          name = tenantXdmSplit@metaClassXdm@title,",
				"          metaclass,",
				"          class = globalXdm@title,",
				"          refs",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> metaClassXdmSelect",
				"tenantXdmSplit@nonFilteredMetaClassXdm select(mapColumn(",
				"          id,",
				"          name = title,",
				"          metaclass,",
				"          class = title,",
				"          refs",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> nonFilteredSelect",
				"metaClassXdmSelect, nonFilteredSelect union(byName: true)~> mergedtenantXdm",
				"descriptorSelect derive(behavior = iif(contains(refs,#item==\"https://ms.adobe.com/xdm/data/record\"), \"Record\", iif(contains(refs,#item==\"https://ms.adobe.com/xdm/data/timeseries\"), \"Time-series\", \"\"))) ~> behaviorDerivedColumn",
				"mergedtenantXdm, xdmDescriptor lookup(id == {xdm:sourceSchema},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> schemaSourceLookup",
				"schemaSourceLookup select(mapColumn(",
				"          id,",
				"          name,",
				"          metaclass,",
				"          class,",
				"          refs,",
				"          descriptor = type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> descriptorSelect",
				"behaviorDerivedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['output.json'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     outputAssertFailedRows: true,",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          metaclass,",
				"          class,",
				"          behavior",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}