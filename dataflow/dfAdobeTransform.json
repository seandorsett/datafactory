{
	"name": "dfAdobeTransform",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "tenantXdmJson",
						"type": "DatasetReference"
					},
					"name": "tenantXdm"
				},
				{
					"dataset": {
						"referenceName": "globalXdmJson",
						"type": "DatasetReference"
					},
					"name": "globalXdm"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputJson",
						"type": "DatasetReference"
					},
					"name": "persistData"
				}
			],
			"transformations": [
				{
					"name": "tenantXdmSplit"
				},
				{
					"name": "metaClassXdmLookup"
				},
				{
					"name": "metaClassXdmSelect"
				},
				{
					"name": "otherSelect"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {_id} as ({$oid} as string),",
				"          id as string,",
				"          type as string,",
				"          title as string,",
				"          auditable as boolean,",
				"          description as string,",
				"          metaclass as string,",
				"          xdmType as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> tenantXdm",
				"source(output(",
				"          {_id} as ({$oid} as string),",
				"          id as string,",
				"          title as string,",
				"          description as string,",
				"          auditable as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> globalXdm",
				"tenantXdm split(locate('/xdm/',metaclass) > 0,",
				"     disjoint: false) ~> tenantXdmSplit@(metaClassXdm, other)",
				"tenantXdmSplit@metaClassXdm, globalXdm lookup(metaclass == globalXdm@id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> metaClassXdmLookup",
				"metaClassXdmLookup select(mapColumn(",
				"          {_id} = tenantXdmSplit@metaClassXdm@{_id},",
				"          id = tenantXdmSplit@metaClassXdm@id,",
				"          type,",
				"          title = tenantXdmSplit@metaClassXdm@title,",
				"          auditable = tenantXdmSplit@metaClassXdm@auditable,",
				"          description = tenantXdmSplit@metaClassXdm@description,",
				"          metaclass,",
				"          xdmType,",
				"          {_id} = globalXdm@{_id},",
				"          id = globalXdm@id,",
				"          title = globalXdm@title,",
				"          description = globalXdm@description,",
				"          auditable = globalXdm@auditable",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> metaClassXdmSelect",
				"tenantXdmSplit@other select(mapColumn(",
				"          {_id},",
				"          id,",
				"          type,",
				"          title,",
				"          auditable,",
				"          description,",
				"          metaclass,",
				"          xdmType",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> otherSelect",
				"metaClassXdmSelect, otherSelect union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> persistData"
			]
		}
	}
}